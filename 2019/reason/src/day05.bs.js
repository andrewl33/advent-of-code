// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Readline = require("bs-readline/src/Readline.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

var input = Fs.readFileSync("./src/day05input.txt", "utf8");

var arr = $$Array.map(Caml_format.caml_int_of_string, input.split(","));

function computer(arr) {
  var one = function (a, b, c) {
    return Caml_array.caml_array_set(arr, c, Caml_array.caml_array_get(arr, a) + Caml_array.caml_array_get(arr, b) | 0);
  };
  var two = function (a, b, c) {
    return Caml_array.caml_array_set(arr, c, Caml_int32.imul(Caml_array.caml_array_get(arr, a), Caml_array.caml_array_get(arr, b)));
  };
  var four = function (instructionPtr) {
    console.log("diagnostic code: " + String(Caml_array.caml_array_get(arr, instructionPtr)));
    return /* () */0;
  };
  var seven = function (a, b, c) {
    var match = Caml_array.caml_array_get(arr, a) < Caml_array.caml_array_get(arr, b);
    return Caml_array.caml_array_set(arr, c, match ? 1 : 0);
  };
  var eight = function (a, b, c) {
    var match = Caml_array.caml_array_get(arr, a) === Caml_array.caml_array_get(arr, b);
    return Caml_array.caml_array_set(arr, c, match ? 1 : 0);
  };
  var parseOpcode = function (opcode) {
    var aux = function (_modes, _parsed, _counter) {
      while(true) {
        var counter = _counter;
        var parsed = _parsed;
        var modes = _modes;
        if (counter !== 0) {
          _counter = counter - 1 | 0;
          _parsed = Pervasives.$at(/* :: */[
                modes % 10,
                /* [] */0
              ], parsed);
          _modes = modes / 10 | 0;
          continue ;
        } else {
          return parsed;
        }
      };
    };
    var oc = opcode % 100;
    var paramSize;
    if (oc >= 9 || oc <= 0) {
      paramSize = 0;
    } else {
      switch (oc - 1 | 0) {
        case 2 :
        case 3 :
            paramSize = 1;
            break;
        case 4 :
        case 5 :
            paramSize = 2;
            break;
        case 0 :
        case 1 :
        case 6 :
        case 7 :
            paramSize = 3;
            break;
        
      }
    }
    return List.rev(aux(opcode / 100 | 0, /* :: */[
                    opcode % 100,
                    /* [] */0
                  ], paramSize));
  };
  var setIndex = function (opcodeArr, instructionPtr) {
    var aux = function (_opcodeArr, _acc, _counter) {
      while(true) {
        var counter = _counter;
        var acc = _acc;
        var opcodeArr = _opcodeArr;
        var setIdx = (function(counter){
        return function setIdx(mode) {
          if (mode !== 0) {
            if (mode !== 1) {
              return -10000000;
            } else {
              return instructionPtr + counter | 0;
            }
          } else {
            return Caml_array.caml_array_get(arr, instructionPtr + counter | 0);
          }
        }
        }(counter));
        if (opcodeArr) {
          var b = opcodeArr[1];
          var a = opcodeArr[0];
          _counter = counter + 1 | 0;
          _acc = Pervasives.$at(/* :: */[
                setIdx(a),
                /* [] */0
              ], acc);
          if (b) {
            _opcodeArr = b;
            continue ;
          } else {
            _opcodeArr = /* [] */0;
            continue ;
          }
        } else {
          return acc;
        }
      };
    };
    return List.rev(aux(opcodeArr, /* [] */0, 1));
  };
  var runner = function (_instructionPtr) {
    while(true) {
      var instructionPtr = _instructionPtr;
      var parsed = parseOpcode(Caml_array.caml_array_get(arr, instructionPtr));
      var indexes = setIndex(List.tl(parsed), instructionPtr);
      var match = List.hd(parsed);
      if (match >= 9) {
        if (match !== 99) {
          console.log("Error");
          return /* () */0;
        } else {
          console.log("Halted");
          return /* () */0;
        }
      } else if (match > 0) {
        switch (match - 1 | 0) {
          case 0 :
              if (indexes) {
                var match$1 = indexes[1];
                if (match$1) {
                  var match$2 = match$1[1];
                  if (match$2 && !match$2[1]) {
                    one(indexes[0], match$1[0], match$2[0]);
                    _instructionPtr = instructionPtr + 4 | 0;
                    continue ;
                  }
                  
                }
                
              }
              throw [
                    Caml_builtin_exceptions.match_failure,
                    /* tuple */[
                      "day05.re",
                      94,
                      10
                    ]
                  ];
          case 1 :
              if (indexes) {
                var match$3 = indexes[1];
                if (match$3) {
                  var match$4 = match$3[1];
                  if (match$4 && !match$4[1]) {
                    two(indexes[0], match$3[0], match$4[0]);
                    _instructionPtr = instructionPtr + 4 | 0;
                    continue ;
                  }
                  
                }
                
              }
              throw [
                    Caml_builtin_exceptions.match_failure,
                    /* tuple */[
                      "day05.re",
                      98,
                      10
                    ]
                  ];
          case 2 :
              var instructionPtr$1 = List.hd(indexes);
              var callback = (function(instructionPtr){
              return function callback(param) {
                return runner(instructionPtr + 2 | 0);
              }
              }(instructionPtr));
              console.log("Input number: ");
              return Readline.readline((function(instructionPtr$1,callback){
                        return function (input) {
                          Caml_array.caml_array_set(arr, instructionPtr$1, Caml_format.caml_int_of_string(input));
                          Readline.close(/* () */0);
                          return Curry._1(callback, /* () */0);
                        }
                        }(instructionPtr$1,callback)));
          case 3 :
              four(List.hd(indexes));
              _instructionPtr = instructionPtr + 2 | 0;
              continue ;
          case 4 :
              if (indexes) {
                var match$5 = indexes[1];
                if (match$5 && !match$5[1]) {
                  var ip = instructionPtr;
                  var a = indexes[0];
                  var b = match$5[0];
                  var r = runner;
                  var match$6 = Caml_array.caml_array_get(arr, a) !== 0 && ip !== Caml_array.caml_array_get(arr, b);
                  if (match$6) {
                    return Curry._1(r, Caml_array.caml_array_get(arr, b));
                  } else {
                    return Curry._1(r, ip + 3 | 0);
                  }
                }
                
              }
              throw [
                    Caml_builtin_exceptions.match_failure,
                    /* tuple */[
                      "day05.re",
                      106,
                      10
                    ]
                  ];
          case 5 :
              if (indexes) {
                var match$7 = indexes[1];
                if (match$7 && !match$7[1]) {
                  var ip$1 = instructionPtr;
                  var a$1 = indexes[0];
                  var b$1 = match$7[0];
                  var r$1 = runner;
                  var match$8 = Caml_array.caml_array_get(arr, a$1) === 0 && ip$1 !== Caml_array.caml_array_get(arr, b$1);
                  if (match$8) {
                    return Curry._1(r$1, Caml_array.caml_array_get(arr, b$1));
                  } else {
                    return Curry._1(r$1, ip$1 + 3 | 0);
                  }
                }
                
              }
              throw [
                    Caml_builtin_exceptions.match_failure,
                    /* tuple */[
                      "day05.re",
                      109,
                      10
                    ]
                  ];
          case 6 :
              if (indexes) {
                var match$9 = indexes[1];
                if (match$9) {
                  var match$10 = match$9[1];
                  if (match$10 && !match$10[1]) {
                    seven(indexes[0], match$9[0], match$10[0]);
                    _instructionPtr = instructionPtr + 4 | 0;
                    continue ;
                  }
                  
                }
                
              }
              throw [
                    Caml_builtin_exceptions.match_failure,
                    /* tuple */[
                      "day05.re",
                      112,
                      10
                    ]
                  ];
          case 7 :
              if (indexes) {
                var match$11 = indexes[1];
                if (match$11) {
                  var match$12 = match$11[1];
                  if (match$12 && !match$12[1]) {
                    eight(indexes[0], match$11[0], match$12[0]);
                    _instructionPtr = instructionPtr + 4 | 0;
                    continue ;
                  }
                  
                }
                
              }
              throw [
                    Caml_builtin_exceptions.match_failure,
                    /* tuple */[
                      "day05.re",
                      116,
                      10
                    ]
                  ];
          
        }
      } else {
        console.log("Error");
        return /* () */0;
      }
    };
  };
  return runner(0);
}

computer(arr);

exports.input = input;
exports.arr = arr;
exports.computer = computer;
/* input Not a pure module */
