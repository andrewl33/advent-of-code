// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var List = require("bs-platform/lib/js/list.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");

var input = Fs.readFileSync("./src/day08input.txt", "utf8");

function strToIntList(s) {
  var _count = s.length - 1 | 0;
  var _acc = /* [] */0;
  while(true) {
    var acc = _acc;
    var count = _count;
    if (count !== -1) {
      if (count !== 0) {
        _acc = Pervasives.$at(/* :: */[
              Caml_format.caml_int_of_string(s[count]),
              /* [] */0
            ], acc);
        _count = count - 1 | 0;
        continue ;
      } else {
        return Pervasives.$at(/* :: */[
                    Caml_format.caml_int_of_string(s[count]),
                    /* [] */0
                  ], acc);
      }
    } else {
      return acc;
    }
  };
}

function fewestZeros(width, height, data) {
  var layerCount = Caml_int32.imul(width, height);
  var _c = 0;
  var _curZeros = 0;
  var _minZeros = Pervasives.max_int;
  var _data = data;
  var _curOnes = 0;
  var _curTwos = 0;
  var _savedOnes = 0;
  var _savedTwos = 0;
  while(true) {
    var savedTwos = _savedTwos;
    var savedOnes = _savedOnes;
    var curTwos = _curTwos;
    var curOnes = _curOnes;
    var data$1 = _data;
    var minZeros = _minZeros;
    var curZeros = _curZeros;
    var c = _c;
    var match = c === (layerCount - 1 | 0);
    if (data$1) {
      if (!data$1[1]) {
        var a = data$1[0];
        if (a === 0) {
          var match$1 = (curZeros + 1 | 0) < minZeros;
          var match$2 = (curZeros + 1 | 0) < minZeros;
          var match$3 = (curZeros + 1 | 0) < minZeros;
          _savedTwos = match$3 ? curTwos : savedTwos;
          _savedOnes = match$2 ? curOnes : savedOnes;
          _curTwos = 0;
          _curOnes = 0;
          _data = /* [] */0;
          _minZeros = match$1 ? curZeros + 1 | 0 : minZeros;
          _curZeros = 0;
          _c = 0;
          continue ;
        } else if (a !== 0) {
          var match$4 = curZeros < minZeros;
          var match$5 = curZeros < minZeros;
          var tmp;
          if (match$5) {
            var match$6 = a === 1;
            tmp = match$6 ? curOnes + 1 | 0 : curOnes;
          } else {
            tmp = savedOnes;
          }
          var match$7 = curZeros < minZeros;
          var tmp$1;
          if (match$7) {
            var match$8 = a === 2;
            tmp$1 = match$8 ? curTwos + 1 | 0 : curTwos;
          } else {
            tmp$1 = savedTwos;
          }
          _savedTwos = tmp$1;
          _savedOnes = tmp;
          _curTwos = 0;
          _curOnes = 0;
          _data = /* [] */0;
          _minZeros = match$4 ? curZeros : minZeros;
          _curZeros = 0;
          _c = 0;
          continue ;
        }
        
      }
      
    } else {
      return Caml_int32.imul(savedOnes, savedTwos);
    }
    if (match) {
      var b = data$1[1];
      var a$1 = data$1[0];
      if (a$1 === 0) {
        var match$9 = (curZeros + 1 | 0) < minZeros;
        var match$10 = (curZeros + 1 | 0) < minZeros;
        var match$11 = (curZeros + 1 | 0) < minZeros;
        _savedTwos = match$11 ? curTwos : savedTwos;
        _savedOnes = match$10 ? curOnes : savedOnes;
        _curTwos = 0;
        _curOnes = 0;
        _data = b;
        _minZeros = match$9 ? curZeros + 1 | 0 : minZeros;
        _curZeros = 0;
        _c = 0;
        continue ;
      } else if (a$1 !== 0) {
        var match$12 = curZeros < minZeros;
        var match$13 = curZeros < minZeros;
        var tmp$2;
        if (match$13) {
          var match$14 = a$1 === 1;
          tmp$2 = match$14 ? curOnes + 1 | 0 : curOnes;
        } else {
          tmp$2 = savedOnes;
        }
        var match$15 = curZeros < minZeros;
        var tmp$3;
        if (match$15) {
          var match$16 = a$1 === 2;
          tmp$3 = match$16 ? curTwos + 1 | 0 : curTwos;
        } else {
          tmp$3 = savedTwos;
        }
        _savedTwos = tmp$3;
        _savedOnes = tmp$2;
        _curTwos = 0;
        _curOnes = 0;
        _data = b;
        _minZeros = match$12 ? curZeros : minZeros;
        _curZeros = 0;
        _c = 0;
        continue ;
      } else {
        return -1;
      }
    } else {
      var b$1 = data$1[1];
      var a$2 = data$1[0];
      if (a$2 !== 0) {
        var match$17 = a$2 === 1;
        var match$18 = a$2 === 2;
        _curTwos = match$18 ? curTwos + 1 | 0 : curTwos;
        _curOnes = match$17 ? curOnes + 1 | 0 : curOnes;
        _data = b$1;
        _c = c + 1 | 0;
        continue ;
      } else if (a$2 === 0) {
        _data = b$1;
        _curZeros = curZeros + 1 | 0;
        _c = c + 1 | 0;
        continue ;
      } else {
        return -1;
      }
    }
  };
}

var encoding = strToIntList(input);

console.log("Part 1: " + String(fewestZeros(25, 6, encoding)));

function renderImage(encoding, width, height) {
  var arr = /* array */[
    /* array */[
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2
    ],
    /* array */[
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2
    ],
    /* array */[
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2
    ],
    /* array */[
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2
    ],
    /* array */[
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2
    ],
    /* array */[
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2
    ]
  ];
  var _encoding = List.rev(encoding);
  var _w = width - 1 | 0;
  var _h = height - 1 | 0;
  while(true) {
    var h = _h;
    var w = _w;
    var encoding$1 = _encoding;
    if (encoding$1) {
      var b = encoding$1[1];
      var a = encoding$1[0];
      if (b) {
        var match = Caml_array.caml_array_get(Caml_array.caml_array_get(arr, h), w) === 2;
        var tmp;
        if (match) {
          tmp = a;
        } else {
          var match$1 = a === 2;
          tmp = match$1 ? Caml_array.caml_array_get(Caml_array.caml_array_get(arr, h), w) : a;
        }
        Caml_array.caml_array_set(Caml_array.caml_array_get(arr, h), w, tmp);
        var match$2 = (w - 1 | 0) < 0;
        var match$3 = (w - 1 | 0) < 0;
        var tmp$1;
        if (match$3) {
          var match$4 = (h - 1 | 0) < 0;
          tmp$1 = match$4 ? height - 1 | 0 : h - 1 | 0;
        } else {
          tmp$1 = h;
        }
        _h = tmp$1;
        _w = match$2 ? width - 1 | 0 : w - 1 | 0;
        _encoding = b;
        continue ;
      } else {
        var match$5 = Caml_array.caml_array_get(Caml_array.caml_array_get(arr, h), w) === 2;
        var tmp$2;
        if (match$5) {
          tmp$2 = a;
        } else {
          var match$6 = a === 2;
          tmp$2 = match$6 ? Caml_array.caml_array_get(Caml_array.caml_array_get(arr, h), w) : a;
        }
        Caml_array.caml_array_set(Caml_array.caml_array_get(arr, h), w, tmp$2);
        var match$7 = (w - 1 | 0) < 0;
        var match$8 = (w - 1 | 0) < 0;
        var tmp$3;
        if (match$8) {
          var match$9 = (h - 1 | 0) < 0;
          tmp$3 = match$9 ? height - 1 | 0 : h - 1 | 0;
        } else {
          tmp$3 = h;
        }
        _h = tmp$3;
        _w = match$7 ? width - 1 | 0 : w - 1 | 0;
        _encoding = /* [] */0;
        continue ;
      }
    } else {
      return arr;
    }
  };
}

var rendered = renderImage(encoding, 25, 6);

console.log("Part 2:");

for(var x = 0; x <= 5; ++x){
  console.log(Caml_array.caml_array_get(rendered, x));
}

exports.input = input;
exports.strToIntList = strToIntList;
exports.fewestZeros = fewestZeros;
exports.encoding = encoding;
exports.renderImage = renderImage;
exports.rendered = rendered;
/* input Not a pure module */
