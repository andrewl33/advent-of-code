// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var $$Map = require("bs-platform/lib/js/map.js");
var $$Set = require("bs-platform/lib/js/set.js");
var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Queue = require("bs-platform/lib/js/queue.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var ArrayLabels = require("bs-platform/lib/js/arrayLabels.js");

var input = Fs.readFileSync("./src/day06input.txt", "utf8");

var arr = ArrayLabels.to_list($$Array.map((function (a) {
            return ArrayLabels.to_list(a.split(")"));
          }), input.split("\r\n")));

var compare = Caml_obj.caml_compare;

var AdjSet = $$Map.Make({
      compare: compare
    });

var compare$1 = Caml_obj.caml_compare;

var AdjSetValues = $$Set.Make({
      compare: compare$1
    });

function fillAdjSet(_adjSet, _arr) {
  while(true) {
    var arr = _arr;
    var adjSet = _adjSet;
    var put = (function(adjSet){
    return function put(pair) {
      var k = List.hd(pair);
      var v = List.nth(pair, 1);
      if (Curry._2(AdjSet.exists, (function (key, param) {
                return k === key;
              }), adjSet)) {
        return Curry._3(AdjSet.add, k, Curry._2(AdjSetValues.add, v, Curry._2(AdjSet.find, k, adjSet)), adjSet);
      } else {
        return Curry._3(AdjSet.add, k, Curry._2(AdjSetValues.add, v, AdjSetValues.empty), adjSet);
      }
    }
    }(adjSet));
    if (arr) {
      var b = arr[1];
      var a = arr[0];
      if (b) {
        _arr = b;
        _adjSet = put(a);
        continue ;
      } else {
        return put(a);
      }
    } else {
      return adjSet;
    }
  };
}

var adjSet = fillAdjSet(AdjSet.empty, arr);

function orbitCount(adjSet) {
  var aux = function (head, counter) {
    if (Curry._2(AdjSet.exists, (function (key, param) {
              return head === key;
            }), adjSet)) {
      var searchSet = Curry._2(AdjSet.find, head, adjSet);
      return List.fold_left((function (acc, el) {
                    return acc + el | 0;
                  }), 0, List.map((function (i) {
                        return aux(i, counter + 1 | 0);
                      }), Curry._1(AdjSetValues.elements, searchSet))) + counter | 0;
    } else {
      return counter;
    }
  };
  return aux("COM", 0);
}

console.log("Part 1: " + String(orbitCount(adjSet)));

function fillAdjSetBiDir(_adjSet, _arr) {
  while(true) {
    var arr = _arr;
    var adjSet = _adjSet;
    var put = (function(adjSet){
    return function put(pair) {
      var k = List.hd(pair);
      var v = List.nth(pair, 1);
      var fill = function (k, v, adjSet) {
        if (Curry._2(AdjSet.exists, (function (key, param) {
                  return k === key;
                }), adjSet)) {
          return Curry._3(AdjSet.add, k, Curry._2(AdjSetValues.add, v, Curry._2(AdjSet.find, k, adjSet)), adjSet);
        } else {
          return Curry._3(AdjSet.add, k, Curry._2(AdjSetValues.add, v, AdjSetValues.empty), adjSet);
        }
      };
      return fill(k, v, fill(v, k, adjSet));
    }
    }(adjSet));
    if (arr) {
      var b = arr[1];
      var a = arr[0];
      if (b) {
        _arr = b;
        _adjSet = put(a);
        continue ;
      } else {
        return put(a);
      }
    } else {
      return adjSet;
    }
  };
}

var adjSet$1 = fillAdjSetBiDir(AdjSet.empty, arr);

function orbitalTransfers(adjSet) {
  var q = Queue.create(/* () */0);
  var _cur = "YOU";
  var _count = 0;
  var _set = AdjSetValues.empty;
  while(true) {
    var set = _set;
    var count = _count;
    var cur = _cur;
    var fillQueue = (function(count){
    return function fillQueue(_arr, _s) {
      while(true) {
        var s = _s;
        var arr = _arr;
        if (arr) {
          var b = arr[1];
          var a = arr[0];
          if (!b && !Curry._2(AdjSetValues.exists, (function(a){
                return function (t) {
                  return t === a;
                }
                }(a)), s)) {
            Queue.add(/* tuple */[
                  a,
                  count
                ], q);
            return Curry._2(AdjSetValues.add, a, s);
          }
          if (Curry._2(AdjSetValues.exists, (function(a){
                return function (t) {
                  return t === a;
                }
                }(a)), s)) {
            if (Curry._2(AdjSetValues.exists, (function(a){
                  return function (t) {
                    return t === a;
                  }
                  }(a)), s)) {
              _s = Curry._2(AdjSetValues.add, a, s);
              _arr = b;
              continue ;
            } else {
              return s;
            }
          } else {
            Queue.add(/* tuple */[
                  a,
                  count
                ], q);
            _s = Curry._2(AdjSetValues.add, a, s);
            _arr = b;
            continue ;
          }
        } else {
          return s;
        }
      };
    }
    }(count));
    if (cur === "SAN") {
      return count;
    } else {
      var newSet = fillQueue(Curry._1(AdjSetValues.elements, Curry._2(AdjSet.find, cur, adjSet)), set);
      if (Queue.is_empty(q)) {
        return -1;
      } else {
        var match = Queue.pop(q);
        _set = newSet;
        _count = match[1] + 1 | 0;
        _cur = match[0];
        continue ;
      }
    }
  };
}

console.log("Part 2: " + String(orbitalTransfers(adjSet$1) - 2 | 0));

exports.input = input;
exports.arr = arr;
exports.AdjSet = AdjSet;
exports.AdjSetValues = AdjSetValues;
exports.fillAdjSet = fillAdjSet;
exports.orbitCount = orbitCount;
exports.fillAdjSetBiDir = fillAdjSetBiDir;
exports.adjSet = adjSet$1;
exports.orbitalTransfers = orbitalTransfers;
/* input Not a pure module */
