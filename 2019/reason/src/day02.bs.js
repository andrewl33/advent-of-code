// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");

var input = /* array */[
  1,
  0,
  0,
  3,
  1,
  1,
  2,
  3,
  1,
  3,
  4,
  3,
  1,
  5,
  0,
  3,
  2,
  10,
  1,
  19,
  1,
  6,
  19,
  23,
  2,
  23,
  6,
  27,
  1,
  5,
  27,
  31,
  1,
  31,
  9,
  35,
  2,
  10,
  35,
  39,
  1,
  5,
  39,
  43,
  2,
  43,
  10,
  47,
  1,
  47,
  6,
  51,
  2,
  51,
  6,
  55,
  2,
  55,
  13,
  59,
  2,
  6,
  59,
  63,
  1,
  63,
  5,
  67,
  1,
  6,
  67,
  71,
  2,
  71,
  9,
  75,
  1,
  6,
  75,
  79,
  2,
  13,
  79,
  83,
  1,
  9,
  83,
  87,
  1,
  87,
  13,
  91,
  2,
  91,
  10,
  95,
  1,
  6,
  95,
  99,
  1,
  99,
  13,
  103,
  1,
  13,
  103,
  107,
  2,
  107,
  10,
  111,
  1,
  9,
  111,
  115,
  1,
  115,
  10,
  119,
  1,
  5,
  119,
  123,
  1,
  6,
  123,
  127,
  1,
  10,
  127,
  131,
  1,
  2,
  131,
  135,
  1,
  135,
  10,
  0,
  99,
  2,
  14,
  0,
  0
];

function partOne(a, b, arr) {
  Caml_array.caml_array_set(arr, 1, a);
  Caml_array.caml_array_set(arr, 2, b);
  var one = function (i) {
    Caml_array.caml_array_set(arr, Caml_array.caml_array_get(arr, i + 3 | 0), Caml_array.caml_array_get(arr, Caml_array.caml_array_get(arr, i + 1 | 0)) + Caml_array.caml_array_get(arr, Caml_array.caml_array_get(arr, i + 2 | 0)) | 0);
    return true;
  };
  var two = function (i) {
    Caml_array.caml_array_set(arr, Caml_array.caml_array_get(arr, i + 3 | 0), Caml_int32.imul(Caml_array.caml_array_get(arr, Caml_array.caml_array_get(arr, i + 1 | 0)), Caml_array.caml_array_get(arr, Caml_array.caml_array_get(arr, i + 2 | 0))));
    return true;
  };
  var _i = 0;
  while(true) {
    var i = _i;
    var match = Caml_array.caml_array_get(arr, i);
    var n = match !== 1 ? (
        match !== 2 ? false : two(i)
      ) : one(i);
    if (n && (i + 4 | 0) < arr.length) {
      _i = i + 4 | 0;
      continue ;
    } else {
      return Caml_array.caml_array_get(arr, 0);
    }
  };
}

console.log("Part 1: " + String(partOne(12, 2, $$Array.copy(input))));

function partTwo(arr, t) {
  var _i = 0;
  var _j = 0;
  while(true) {
    var j = _j;
    var i = _i;
    if (partOne(i, j, $$Array.copy(arr)) === t) {
      return Caml_int32.imul(100, i) + j | 0;
    } else {
      if (i === 100 && j === 100) {
        return -1;
      }
      if (j !== 100) {
        _j = j + 1 | 0;
        continue ;
      } else {
        _j = 0;
        _i = i + 1 | 0;
        continue ;
      }
    }
  };
}

console.log("Part 2: " + String(partTwo($$Array.copy(input), 19690720)));

exports.input = input;
exports.partOne = partOne;
exports.partTwo = partTwo;
/*  Not a pure module */
